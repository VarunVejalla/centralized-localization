
;; Function swap (swap, funcdef_no=0, decl_uid=3177, cgraph_uid=1, symbol_order=1)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void swap (int a, int b)
{
  int tmp;

  <bb 2> :
  [quicksort.c:8:8] tmp = [quicksort.c:8:20] array[a];
  [quicksort.c:9:20] _1 = [quicksort.c:9:20] array[b];
  [quicksort.c:9:13] [quicksort.c:9:9] array[a] = _1;
  [quicksort.c:10:13] [quicksort.c:10:9] array[b] = tmp;
  [quicksort.c:11:1] return;

}



;; Function partition (partition, funcdef_no=1, decl_uid=3182, cgraph_uid=2, symbol_order=2)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 8 }
;; 8 succs { 1 }
int partition (int left, int right)
{
  int i;
  int index;
  int pivotValue;
  int pivotIndex;
  int D.3211;

  <bb 2> :
  [quicksort.c:17:8] pivotIndex = left;
  [quicksort.c:18:8] pivotValue = [quicksort.c:18:26] array[pivotIndex];
  [quicksort.c:19:8] index = left;
  [quicksort.c:22:4] swap (pivotIndex, right);
  [quicksort.c:23:10] i = left;
  [quicksort.c:23:4] goto <bb 6>; [INV]

  <bb 3> :
  [quicksort.c:25:15] _1 = [quicksort.c:25:15] array[i];
  [quicksort.c:25:9] if (pivotValue > _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  [quicksort.c:27:10] swap (i, index);
  [quicksort.c:28:16] index = index + 1;

  <bb 5> :
  [quicksort.c:23:30 discrim 2] i = i + 1;

  <bb 6> :
  [quicksort.c:23:20 discrim 1] if (i < right)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  [quicksort.c:31:4] swap (right, index);
  [quicksort.c:33:11] D.3211 = index;

  <bb 8> :
<L5>:
  [quicksort.c:33:11 discrim 1] return D.3211;

}



;; Function quicksort (quicksort, funcdef_no=2, decl_uid=3194, cgraph_uid=3, symbol_order=3)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
void quicksort (int left, int right)
{
  int index;

  <bb 2> :
  [quicksort.c:39:6] if (left >= right)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  [quicksort.c:40:7] // predicted unlikely by early return (on trees) predictor.
  [quicksort.c:40:7] goto <bb 5>; [INV]

  <bb 4> :
  [quicksort.c:42:16] index = partition (left, right);
  [quicksort.c:43:4] _1 = index + -1;
  [quicksort.c:43:4] quicksort (left, _1);
  [quicksort.c:44:4] _2 = index + 1;
  [quicksort.c:44:4] quicksort (_2, right);

  <bb 5> :
<L2>:
  return;

}



;; Function main (main, funcdef_no=3, decl_uid=3197, cgraph_uid=4, symbol_order=4)

Removing basic block 9
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }
int main ()
{
  int i;
  int D.3216;

  <bb 2> :
  [quicksort.c:51:13] [quicksort.c:51:9] array[0] = 62;
  [quicksort.c:52:13] [quicksort.c:52:9] array[1] = 83;
  [quicksort.c:53:13] [quicksort.c:53:9] array[2] = 4;
  [quicksort.c:54:13] [quicksort.c:54:9] array[3] = 89;
  [quicksort.c:55:13] [quicksort.c:55:9] array[4] = 36;
  [quicksort.c:56:13] [quicksort.c:56:9] array[5] = 21;
  [quicksort.c:57:13] [quicksort.c:57:9] array[6] = 74;
  [quicksort.c:58:13] [quicksort.c:58:9] array[7] = 37;
  [quicksort.c:59:13] [quicksort.c:59:9] array[8] = 65;
  [quicksort.c:60:13] [quicksort.c:60:9] array[9] = 33;
  [quicksort.c:61:14] [quicksort.c:61:9] array[10] = 96;
  [quicksort.c:62:14] [quicksort.c:62:9] array[11] = 38;
  [quicksort.c:63:14] [quicksort.c:63:9] array[12] = 53;
  [quicksort.c:64:14] [quicksort.c:64:9] array[13] = 16;
  [quicksort.c:65:14] [quicksort.c:65:9] array[14] = 74;
  [quicksort.c:66:14] [quicksort.c:66:9] array[15] = 55;
  [quicksort.c:68:11] i = 0;
  [quicksort.c:68:4] goto <bb 4>; [INV]

  <bb 3> :
  [quicksort.c:69:7] _1 = [quicksort.c:69:7] array[i];
  [quicksort.c:69:7] printf ([quicksort.c:69:14] "%d ", _1);
  [quicksort.c:68:25 discrim 3] i = i + 1;

  <bb 4> :
  [quicksort.c:68:18 discrim 1] if (i <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  [quicksort.c:71:4] __builtin_putchar (10);
  [quicksort.c:73:4] quicksort (0, 15);
  [quicksort.c:75:11] i = 0;
  [quicksort.c:75:4] goto <bb 7>; [INV]

  <bb 6> :
  [quicksort.c:76:7] _2 = [quicksort.c:76:7] array[i];
  [quicksort.c:76:7] printf ([quicksort.c:76:14] "%d ", _2);
  [quicksort.c:75:25 discrim 3] i = i + 1;

  <bb 7> :
  [quicksort.c:75:18 discrim 1] if (i <= 15)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  [quicksort.c:78:4] __builtin_putchar (10);
  [quicksort.c:80:11] D.3216 = 0;

  <bb 9> :
<L6>:
  return D.3216;

}


